{"ast":null,"code":"const DefaultState = {\n  loading: false,\n  data: {},\n  errorMsg: \"\"\n};\n\nconst PokemonMultipleReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case \"POKEMON_MULTIPLE_LOADING\":\n      return { ...state,\n        loading: true,\n        errorMsg: \"\"\n      };\n\n    case \"POKEMON_MULTIPLE_FAIL\":\n      return { ...state,\n        loading: false,\n        errorMsg: \"unable to find Pokemon\"\n      };\n\n    case \"POKEMON_MULTIPLE_SUCCESS\":\n      return { ...state,\n        loading: false,\n        errorMsg: \"\",\n\n        /* just overwrite parts of data, \n        data is an object and nested objects within objects don`t get copied even though you do spread so you need to make another copy of data \n        we need to create a deep copy of our state \n        [action.pokemonName] like this we don`t need a loader, better for user experience, in the background its still going to run once opened \n        then switched to another pokemon then going back, we cached some of old response */\n        data: { ...state.data,\n          [action.pokemonName]: action.payload\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = PokemonMultipleReducer;\nexport default PokemonMultipleReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonMultipleReducer\");","map":{"version":3,"sources":["/home/camillabachna/Desktop/Platzi/Platzi Courses/platzi-courses/react-router-redux/pokemon/src/reducers/PokemonMultipleReducer.js"],"names":["DefaultState","loading","data","errorMsg","PokemonMultipleReducer","state","action","type","pokemonName","payload"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,KAAX;AAAkBC,EAAAA,IAAI,EAAE,EAAxB;AAA4BC,EAAAA,QAAQ,EAAE;AAAtC,CAArB;;AAEA,MAAMC,sBAAsB,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,0BAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYJ,QAAAA,OAAO,EAAE,IAArB;AAA2BE,QAAAA,QAAQ,EAAE;AAArC,OAAP;;AAEF,SAAK,uBAAL;AACE,aAAO,EAAE,GAAGE,KAAL;AAAYJ,QAAAA,OAAO,EAAE,KAArB;AAA4BE,QAAAA,QAAQ,EAAE;AAAtC,OAAP;;AAEF,SAAK,0BAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELJ,QAAAA,OAAO,EAAE,KAFJ;AAGLE,QAAAA,QAAQ,EAAE,EAHL;;AAIL;AACR;AACA;AACA;AACA;AACQD,QAAAA,IAAI,EAAE,EAAE,GAAGG,KAAK,CAACH,IAAX;AAAiB,WAACI,MAAM,CAACE,WAAR,GAAsBF,MAAM,CAACG;AAA9C;AATD,OAAP;;AAYF;AACE,aAAOJ,KAAP;AArBJ;AAuBD,CAxBD;;KAAMD,sB;AA0BN,eAAeA,sBAAf","sourcesContent":["const DefaultState = { loading: false, data: {}, errorMsg: \"\" };\n\nconst PokemonMultipleReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case \"POKEMON_MULTIPLE_LOADING\":\n      return { ...state, loading: true, errorMsg: \"\" };\n\n    case \"POKEMON_MULTIPLE_FAIL\":\n      return { ...state, loading: false, errorMsg: \"unable to find Pokemon\" };\n\n    case \"POKEMON_MULTIPLE_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        errorMsg: \"\",\n        /* just overwrite parts of data, \n        data is an object and nested objects within objects don`t get copied even though you do spread so you need to make another copy of data \n        we need to create a deep copy of our state \n        [action.pokemonName] like this we don`t need a loader, better for user experience, in the background its still going to run once opened \n        then switched to another pokemon then going back, we cached some of old response */\n        data: { ...state.data, [action.pokemonName]: action.payload },\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default PokemonMultipleReducer;\n"]},"metadata":{},"sourceType":"module"}